#! /usr/bin/env python
#-*- coding:utf-8 -*-

import numpy as np

#from quatrains import get_quatrains
from rhyme import RhymeEvaluator
#from predict import Seq2SeqPredictor
#from plan import Planner

from poems import Poems

from IPython import embed



def eval_poems(evaluator, poems):
    scores = []
    for poem in poems:
        score = evaluator.eval(poem)
        scores.append(score)

    mean_score = np.mean(scores)
    std_score = np.std(scores)

    print ("Mean score = {}, standard deviation = {}".format(mean_score, std_score))
    return scores, mean_score, std_score


def eval_train_data():
    evaluator = RhymeEvaluator()

    #quatrains = get_quatrains()
    #poems = map(lambda quatrain: quatrain['sentences'], quatrains) # Strip out metadata information

    # TODO: generate quatrains here
    poems=get_poems()

    print ("Testing {} quatrains from the corpus.".format(len(poems)))
    scores, mean_score, std_score = eval_poems(evaluator, poems)
    return scores, mean_score, std_score


def get_poems():

    poems=Poems()

    #data=[s for p in poems for s in p]

    rv=poems.poems

    #rv=[['黄金旌令泪声歌','一荡音门复旧君','况是秦皇激见来','何事何时得汉王']]
    rv=[['床前明月光','疑是地上霜','举头望明月','低头思故乡']]

    return rv
    
"""
def eval_generated_data(num=100):
    evaluator = RhymeEvaluator()

    planner = Planner()
    predictor = Seq2SeqPredictor()

    poems = []
    for _ in range(num):        
        keywords = planner.plan(u'')
        assert 4 == len(keywords)

        sentences = predictor.predictor(keywords)
        poems.append(sentences)

    print "Testing {} quatrains generated by model.".format(num)
    eval_poems(evaluator, poems)
"""

def main():
    eval_train_data()
    # eval_generated_data()
    

if __name__ == '__main__':
    main()